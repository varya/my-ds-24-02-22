{"data":{"allMdx":{"nodes":[{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/about/index.md","frontmatter":{"title":"About the project"},"rawBody":"---\ntitle: About the project\n---\n\nThis design system website is made with [Bridge](http://bridgetool.io/), the tool which bridges the\ngap between design and development making it possible to build your brand and design system together!\n\n### Living documentation\n\nWith Bridge, you can easily create a living design system documentation together as a team. Design guidelines, visual language, style guides, pattern libraries, and your processes, all get represented.\n\n### Friendly environment\n\nBridge offers a friendly environment and familiar interface for designers, developers, and other specialists. Edit your documentation via our interface with great UX or directly in its code source.\n\n### Integration with tools\n\nIntegration with the most popular design and development tools ensures a seamless documenting process and no double work.\n\n### Full control over sources\n\nBridge helps you edit and maintain, but you still own the source code, it is hosted in your repository, which you have full control.\n\n### No boring routines\n\nWe take care of all necessary routine and automation, working by default or custom-made via a human-friendly interface.\n\n### Rich features for free\n\nBridge keeps the most desired features free. We design the solutions so that you can stay on the free plan as long as possible.\n\n### Scale with your needs\n\nChoosing Bridge means you only need to pay for the selected features. Drop off anything you don't need to fit your budget.\n\n### [Build your own design system documentation website with Bridge](http://bridgetool.io/)\n","parent":{"__typename":"File","relativeDirectory":"about","name":"index"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/components/buttons.md","frontmatter":{"title":"Buttons"},"rawBody":"---\ntitle: Buttons\npath: components/buttons\nstatus: Stable\nsource: \"https://github.com/primer/css/tree/master/src/buttons\"\n---\n\nButtons are used to initialize an action. Button labels express what action will occur when the user interacts with it.\n\n## Awesome Button\n\n### Primary Button\n\n```jsx live nocode\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n### Button sizes\n\n```jsx live\n\nThere is a <AwesomeButton\n  size=\"small\"\n  type=\"primary\"\n>\n  Small\n</AwesomeButton>, <AwesomeButton\n  size=\"medium\"\n  type=\"primary\"\n>\n  Medium\n</AwesomeButton>, and <AwesomeButton\n  size=\"large\"\n  type=\"primary\"\n>\n  Large\n</AwesomeButton>!\n```\n\n### Button with Icon\n\n```jsx live\n<AwesomeButton size=\"icon\" type=\"primary\">\n  <i className=\"fa fa-codepen\" />\n</AwesomeButton>\n```\n\n## Progress Button\n\n### Secondary Progress Button\n\n```jsx live\n<AwesomeButtonProgress type=\"secondary\">Secondary</AwesomeButtonProgress>\n```\n\n## Social Button\n\nSocial buttons use brand colors of social networks and display their button. You can provide\nare URL to there the social button navigates.\n\n```jsx live\n<AwesomeButtonSocial\n  type=\"facebook\"\n  url=\"http://bridgetool.io/\"\n>\n  Facebook\n</AwesomeButtonSocial>\n\n<AwesomeButtonSocial\n  type=\"twitter\"\n  url=\"http://bridgetool.io/\"\n>\n  Twitter\n</AwesomeButtonSocial>\n\n<AwesomeButtonSocial\n  type=\"instagram\"\n  url=\"http://bridgetool.io/\"\n>\n  Instagram\n</AwesomeButtonSocial>\n```\n\n## Actions\n\nYou can use `action` property to provide a callback on the button click. This is how\nthe button works in a simple counter application.\n\n```javascript live noinline\nfunction DemoApp() {\n  const [count, setCount] = React.useState(0)\n  return (\n    <div>\n      <AwesomeButton action={() => setCount(n => n - 1)}>-</AwesomeButton>\n      {count}\n      <AwesomeButton action={() => setCount(n => n + 1)}>+</AwesomeButton>\n    </div>\n  )\n}\nrender(<DemoApp />)\n```\n\n## How this page works\n\nThis page documents `<AwesomeButton>`, `<AwesomeButtonProgress>`, and `<AwesomeButtonSocial>` components from [React Awesome Button library](https://caferati.me/demo/react-awesome-button).\n\nWe expend the Gatsby theme of this website adding special files to `./src/@bridgetool/gatsby-theme-dev`.\n\nTo make the components available in the examples, we link the library in `live-code-components.js` and list all\nits components.\n\n```js\nimport * as awesomeButtons from \"react-awesome-button\"\nimport \"react-awesome-button/dist/styles.css\"\n\nexport default {\n  // ... other libraries and/or components\n  ...awesomeButtons,\n}\n```\n\nBesides, it can be used in markdown. To make it happen, we put this component to the global scope listing it in\n`markdown-components.js`\n\n```js\nimport * as awesomeButtons from \"react-awesome-button\"\nimport \"react-awesome-button/dist/styles.css\"\n\nexport default {\n  // ... other libraries and/or components\n  ...awesomeButtons,\n}\n```\n\nThe icon button uses FontAwesome, so we linked it from CDN. Look at the [Customizing](/getting-started/customizing#link-css-files) page to learn how.\n","parent":{"__typename":"File","relativeDirectory":"components","name":"buttons"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/index.mdx","frontmatter":{"title":"My awesome design system"},"rawBody":"---\ntitle: My awesome design system\n---\n\n# What is this design system\n\n\nimport {HeroLayout} from \"@bridgetool/gatsby-theme-dev/src/components/ThemeComponents\"\n\nexport default HeroLayout\n\n**TODO** First page content\n\n## General features\n\nFeatures to do over the whole site:\n\n- Search\n- Feedback form\n- Bridge-styled footer\n- Responsive layout","parent":{"__typename":"File","relativeDirectory":"","name":"index"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/components/index.md","frontmatter":{"title":"Components"},"rawBody":"---\ntitle: Components\n---\n\nThis section is meant to describe the components of your library (or libraries).\n\nCreate a separate page for each component or a group of components, and list the pages in the side menu.\n\n## Page structure\n\nEach design system has its own structure for the component pages. You should find your own which meets the needs\nof designers and developers using this documentation.\n\nHowever, you can follow the general guidelines, like the following.\n\n- Explain the purpose of the component\n- Describe when it should be used\n- Demonstrate the use cases with \"do and don't\" blocks\n- Provide live examples\n- Give code samples\n\n## Documenting features\n\n### Code examples\n\nProvide code examples.\n\n```jsx\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n### Live code examples\n\nCode examples can render live.\n\n```jsx live\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n### Dos and donts\n\nUse \"Do and dont\" block to explain how to use the component.\n\n<DoDontContainer>\n  <Do>\n    Use brief and <b>direct communication</b>\n  </Do>\n  <Dont>\n    Don't use wordy and redundant copy\n  </Dont>\n</DoDontContainer>\n\n```\n<DoDontContainer>\n  <Do>\n    Use brief and <b>direct communication</b>\n  </Do>\n  <Dont>\n    Don't use wordy and redundant copy\n  </Dont>\n</DoDontContainer>\n```\n","parent":{"__typename":"File","relativeDirectory":"components","name":"index"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/components/spinner.md","frontmatter":{"title":"Spinner"},"rawBody":"---\ntitle: Spinner\npath: components/spinner\nstatus: Stable\nsource: \"https://github.com/KyleAMathews/react-spinkit\"\n---\n\nSpinners are used when retrieving data or performing slow computations, and help to notify users that loading is underway.\n\n## Usage\n\nSpinners are used when retrieving data or performing slow computations. They notify to the user that their request is being processed. Although they do not provide details about what is occurring on the back-end, they reassure the user that their action is being processed.\n\nUse a loading spinner whenever the wait time is anticipated to be longer than three seconds.\n\n### Types of spinners\n\nClassic spinner is a rotating unclosed circle.\n\n```jsx live nocode\n<Spinner name=\"ball-clip-rotate\" />\n```\n\nIn some designs, this shape is modified to match the other styles.\n\n```jsx live nocode\n<Spinner name=\"circle\" />\n```\n\nThere can be other shapes of spinners. Sometimes it is the shape what creates connection to specific application.\n\n```jsx live nocode\n<Spinner name=\"line-scale\" />\n```\n\n### Branding spinners\n\nSpinners should be aligned with other brand elements and used the color from the design system\npalette.\n\n```jsx live nocode\n<Spinner name=\"circle\" color=\"coral\" />\n```\n\n## Documenting\n\nFor the sake of visual consistency it is good to provide the living examples\nin special blocks (as you could see above.\n\nHowever, you can choose to put it inline in the very\ndocumenttaion text.\n\n<Spinner name=\"pulse\" />\n\nLooks amazing!\n\n## Code\n\nThis spinner is a React component and can be used as the following.\n\n```jsx\n<Spinner name=\"circle\" />\n```\n\nChanging that `name` and `color` attributes you can change its visual. Play around\nwith this live example. Try to give it a name `hree-bounce` and color `orange`. You can also write a text before or after it.\n\n```jsx live\n<Spinner name=\"folding-cube\" color=\"fuchsia\"/> loading...\n```\n\n## Component props\n\n| Name                     | Type    |    Default     | Description                                                                                               |\n| :----------------------- | :------ | :------------: | :-------------------------------------------------------------------------------------------------------- |\n| name                     | String  | 'three-bounce' | Name of spinner. Find full list in the [react-spinkit docs](http://kyleamathews.github.io/react-spinkit/) |\n| color                    | String  |                | Color of the spinner                                                                                      |\n| fadeIn                   | String  |     'full'     | 'full', 'half', 'quarter', 'none'                                                                         |\n| noFadeIn                 | Boolean |     false      |                                                                                                           |\n| overrideSpinnerClassName | String  |       ''       | Class to replace spinner CSS classes                                                                      |\n| className                | String  |                | Class to be added to the spinner                                                                          |\n\n## How this page works\n\nThis pages shows a Spinner component from [react-spinkit](http://kyleamathews.github.io/react-spinkit/) library.\n\nWe expend the Gatsby theme of this website adding special files to `./src/@bridgetool/gatsby-theme-dev`.\n\nTo make the Spinner available in the examples, we link the library in `live-code-components.js`:\n\n```js\nimport Spinner from \"react-spinkit\"\n\nexport default {\n  // ... other libs and/or components here\n  Spinner,\n}\n```\n\nBesides, it can be used in markdown. To make it happen, we put this component to the global scope listing it in\n`markdown-components.js`\n\n```js\nimport Spinner from \"react-spinkit\"\n\nexport default {\n  // ... other libs and/or components here\n  Spinner,\n}\n```\n","parent":{"__typename":"File","relativeDirectory":"components","name":"spinner"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/getting-started/customizing.md","frontmatter":{"title":"Customizing"},"rawBody":"---\ntitle: Customizing\n---\n\n## Examples\n\nThe live code examples are rendered in `<iframe>` elements. You\ncan provide additional resources such as CSS for the content of these frames.\n\n### Link CSS files\n\nModify `./src/@bridgetool/gatsby-theme-dev/live-code-styles.js` file and list the\nURLS of CSS files you want to link as the elements of the `linkedCSS` array. For example:\n\n```js\nexport const linkedCSS = [\n  \"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\",\n]\n```\n\n### Provide styles\n\nYou can also provide styles as the text content of `styles` variable in\n`./src/@bridgetool/gatsby-theme-dev/live-code-styles.js`.\n\n```js\nexport const styles = `\nbody {\n  color: grey;\n}\n`\n```\n","parent":{"__typename":"File","relativeDirectory":"getting-started","name":"customizing"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/getting-started/index.md","frontmatter":{"title":"Getting started"},"rawBody":"---\ntitle: Getting started\npath: getting-started/index\n---\n\n## Theme features\n\n### Code blocks\n\n** Simple code block **\n\n```javascript\nimport { Button } from \"my-awesome-library\"\n```\n\n** Live code block **\n\n```html live\n<input type=\"radio\" /> Radio button\n```\n\nSome inline code `var ya;`.\n","parent":{"__typename":"File","relativeDirectory":"getting-started","name":"index"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/getting-started/markdown-syntax.md","frontmatter":{"title":"Markdown Syntax"},"rawBody":"---\ntitle: Markdown Syntax\n---\n\n# Header 1\n\n## Header 2\n\n### Haeder 3\n\n#### Header 4\n\n##### Header 5\n\n###### Header 6\n\n## Lists\n\n- Unordered 1\n- Unordered 2\n- Unordered 3\n\n1. Ordered 1\n1. Ordered 2\n1. Ordered 3\n\n- Nested 1\n  - Nested 1.1\n  - Nested 1.2\n- Nested 2\n\n<dl>\n  <dt>Definition list 1</dt>\n  <dd>Description of item 1</dd>\n  <dt>Definition list 2</dt>\n  <dd>Description of item 2</dd>\n</dl>\n\n## Horizontal Separator\n\n<hr/>\n\n## Quote\n\n> More on semantic markup:\n>\n> - [Semantic Structure – WebAIM](http://webaim.org/techniques/semanticstructure/)\n\n## Table\n\n| Name   | Type    | Default | Description                                   |\n| :----- | :------ | :-----: | :-------------------------------------------- |\n| alt    | String  |         | Passed through to alt on img tag              |\n| size   | Number  |   20    | adds the `avatar-small` class if less than 24 |\n| src    | String  |         | The source url of the avatar image            |\n| square | Boolean |  false  | Used to create a square avatar                |\n\n## Code block\n\n### Html code\n\n```html\n<input type=\"checkbox\" value=\"1\" checked />\n```\n\nTo provide the code blocks use the following markdown syntax. You can specify the language\nfor proper highlighting.\n\n<code>\n{`\n${'```'}html\n<input type=\"checkbox\" value=\"1\" checked>\n${'```'}\n`}\n</code>\n\n### Live example\n\nThe code in the examples can be rendered so that they can be living!\n\n```html live\n<input type=\"checkbox\" value=\"1\" checked /> Label\n```\n\nMerely add `live` attribute next to the language.\n\n<code>\n{`\n${'```'}html live\n<input type=\"checkbox\" value=\"1\" checked> Label\n${'```'}\n`}\n</code>\n\n### Example without code\n\nOr you can provide a living example of the component but hide its code.\n\n```html live nocode\n<input type=\"checkbox\" value=\"1\" checked /> Label\n```\n\nThis is done with an additional `nocode` attribute.\n\n<code>\n{`\n${'```'}html live nocode\n<input type=\"checkbox\" value=\"1\" checked> Label\n${'```'}\n`}\n</code>\n\n### React live examples\n\nLive examples work also with the linked React components. You can give a code\nexample and render its preview.\n\n```jsx live\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n<code>\n{`\n${'```'}jsx live\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n${'```'}\n`}\n</code>\n\nOr you can choose to hide the code block leaving only the preview.\n\n```jsx live nocode\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n<code>\n{`\n${'```'}jsx live nocode\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n${'```'}\n`}\n</code>\n\nAnd the code blocks alone work for React examples as well.\n\n```jsx\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n```\n\n<code>\n{`\n${'```'}jsx\n<AwesomeButton type=\"primary\">Primary</AwesomeButton>\n${'```'}\n`}\n</code>\n\n## Special blocks\n\n### Do and don't\n\n#### With images\n\n<DoDontContainer>\n  <Do src=\"https://user-images.githubusercontent.com/586552/63106528-06de5100-bf51-11e9-8a5e-98583ed74874.png\">\n    Use brief and direct communication\n  </Do>\n  <Dont src=\"https://user-images.githubusercontent.com/586552/63106527-06de5100-bf51-11e9-858c-72de6a5c728a.png\">\n    Don't use wordy and redundant copy\n  </Dont>\n</DoDontContainer>\n\n#### With HTML\n\n<DoDontContainer>\n  <Do>\n    Use brief and <b>direct communication</b>\n  </Do>\n  <Dont>\n    Don't use wordy and redundant copy\n  </Dont>\n</DoDontContainer>\n\n#### With makrdown (TODO)\n\n<DoDontContainer>\n  <Do>\n    Use brief and direct communication **test**\n  </Do>\n  <Dont>\n    Don't use wordy and redundant copy\n  </Dont>\n</DoDontContainer>\n\n### Caption\n\nimport { Caption } from '@bridgetool/gatsby-theme-dev'\n\n<img alt=\"\" src=\"https://s3.us-west-2.amazonaws.com/photos.puppyspot.com/breeds/245/card/500000291_medium.jpg\" />\n<Caption>A beautiful husky puppy.</Caption>\n\n## React components from a global scope\n\n<ButtonDanger>Button Danger</ButtonDanger>\n\n## Live React\n\n```jsx live\n<Button>Button</Button>\n<ButtonDanger>Button Danger</ButtonDanger>\n<ButtonOutline>Button Outline</ButtonOutline>\n<ButtonPrimary>Button Primary</ButtonPrimary>\n```\n","parent":{"__typename":"File","relativeDirectory":"getting-started","name":"markdown-syntax"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/guidelines/accessibility.md","frontmatter":{"title":"Accessibility"},"rawBody":"---\ntitle: Accessibility\n---\n\n## Overview\n\nAccessible design is design with appreciation that users have different abilities. The design system components should meet the needs of a diverse audience—including those with disabilities that use assistive technology to access digital content. Including and respecting diversity in the design process, esures that barriers are lowered and everyone can access the content they need.\n\nAccessibility not only helps users with disabilities; it provides better user experiences for everyone.\n\nAn accessible product should:\n\n- Give all users the same quality of experience\n- Adapt to users and situations\n\n### Blind users\n\n#### How they experience an interface\n\n- May use a screen reader to experience interfaces\n- May rely on Braille output\n- Cannot be expected to use a pointer or mouse for input\n\n#### What designers should think about\n\n- Is visual information translated effectively into text? Can the image be\n  understood through its metadata alone?\n- When possible, test all designs through a screen reader.\n\n#### How this applies to everyone\n\n- As audio-only interfaces gain popularity through devices like AI assistants,\n  users are expecting more and more from the audio representations of\n  experiences.\n\n### Low-vision users\n\nLow vision can include partial sight in one or both eyes and can range from mild\nto severe. It affects approximately 4% of the world’s population.\n\n#### How they experience an interface\n\n- May use screen readers, screen magnifiers, high-contrast modes, and/or\n  monochrome displays\n- May have their browser font size adjusted to a larger setting\n- May not use adaptive technology at all\n\n#### What designers should think about\n\n- Maximize the readability and visual clarity of content.\n- Consider how the relative proximity of information changes when a page is\n  magnified.\n- Follow\n  [keyboard guidelines](https://www.nngroup.com/articles/keyboard-accessibility/)\n  and test with a screen reader to ensure the page is read to the user in a\n  logical order.\n- To gain a better understanding of the various low vision disabilities, use the\n  [NoCoffee](https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl)\n  Chrome plugin to preview websites.\n\n#### How this applies to everyone\n\n- Users without disabilities sometimes need to view screens in poor lighting\n  conditions. For example, it's difficult to see a screen outside on a bright\n  day. A higher-contrast design will make the screen more usable for everyone.\n- Vision worsens gradually starting around age 40, and good contrast helps this\n  very large demographic use your interface.\n\n### Color-blind users\n\nColor-blindness affects 8% of all men and 0.4% of women.\n\n#### How they experience an interface\n\n- Will not be able to differentiate between some colors on an interface\n- Rely on non-color information to use an interface\n\n#### What designers should think about\n\n- Carbon color themes strive to comply with the\n  [WCAG 2.1 AA guidelines for contrast](https://www.w3.org/WAI/cognitive/). The\n  color palette should ensure you avoid contrast issues when used correctly. If\n  you're working in Sketch, we recommend the [Stark](http://www.getstark.co/)\n  plugin.\n  <!-- - To view best practices for using color in Data Visualization, view the [Data Vis](/data-visualization/overview/colors) color page. -->\n\n### Low vision\n\nLow vision can include partial sight in one or both eyes and can range from mild\nto severe. It affects about 4% of the world’s population.\n\n| Type                       | Visual deficiency                                                                        |\n| -------------------------- | ---------------------------------------------------------------------------------------- |\n| _Low acuity_               | Also known as \"blurred vision\". Can make text difficult to read, since it appears fuzzy. |\n| _Low contrast sensitivity_ | Decreased ability to determine fine detail and distinguish one object from another       |\n| _Obstructed visual field_  | The user's view is partially obstructed. Can include central vision and spotty vision.   |\n| _Retinitis Pigmentosa_     | Also known as \"tunnel vision\". The user is only able to see central elements.            |\n\n#### Designing for low vision\n\nTo get an understanding of the various low vision disabilities, we recommend\nusing the\n[NoCoffee](https://chrome.google.com/webstore/detail/nocoffee/jjeeggmbnhckmgdhmgdckeigabjfbddl)\nChrome plugin to preview websites. Low vision users may be using a screen reader\nto preview your website or experience, so be sure to follow\n[keyboard guidelines](/guidelines/accessibility/keyboard) to ensure the page is\nread to the user in a logical order.\n\n### Deaf and hard-of-hearing users\n\n#### How they experience an interface\n\n- May rely on closed captioning and other alternative representations of audio\n\n#### What designers should think about\n\n- Find an alternative way to convey information exclusively with sound.\n- Transcribe and caption all videos and animations that have meaningful audio.\n\n#### How this applies to everyone\n\n- All users can benefit from closed captioning. Imagine using your device in a\n  loud environment or, alternatively, in a quiet environment when it wouldn't be\n  appropriate to turn your sound on.\n\n### Physical disabilities\n\n#### How users with physical disabilities experience an interface\n\n- May rely on keyboards, track balls, voice recognition, and other assistive\n  technologies to interact with an interface\n- May not be able to use a keyboard, mouse, or other pointer\n\n#### What designers should think about\n\n- Design for keyboard interaction\n- Learn how to navigate using a\n  [keyboard](https://help.gnome.org/users/gnome-help/stable/keyboard-nav.html.en)\n  and spend some time navigating the web and digital products like email using\n  only the keyboard.\n\n#### How this applies to everyone\n\n- Many users prefer to navigate interfaces with a keyboard and no mouse for\n  efficiency. Good keyboard navigation can help everyone be more productive.\n\n### Users with cognitive disabilities\n\nFunctional cognitive disabilities can result in difficulties with:\n\n- Memory\n- Problem solving\n- Attention\n- Reading, linguistic, and verbal comprehension\n- Mathematics\n- Visual comprehension\n\n#### How they experience an interface\n\n- May have limited working memory and need information to remain visible\n  throughout the completion of a task\n- May experience seizures when exposed to flashing content due to epilepsy\n\n#### What designers should think about\n\n- Designers should avoid complex language, autoplaying animations and videos,\n  and flashing animations. Designs should pass usability heuristics, such as\n  cognitive walkthroughs, to ensure users do not feel overloaded when completing\n  tasks.\n- Design in as linear a fashion as possible and focus on design heuristics that\n  have to do with cognitive load and memory.\n\n#### How this applies to everyone\n\n- Best practices for cognitive disabilities benefit all users. Busy environments\n  can tax your cognitive load. Aging adults may also experience a decline in\n  cognitive abilities. Placing a low cognitive load on users reduces mistakes\n  and improves effectiveness, regardless of their abilities.\n\n## Global accessibility standards\n\n- [World Wide Web Consortium](https://www.w3.org/WAI/) (W3C)'s Web Accessibility\n  Initiative (WAI) provides resources to improve the accessibility of the World\n  Wide Web.\n- Web Accessibility Initiative (WAI) contributors create and maintain the\n  [Web Content Accessibility Guidelines](https://www.w3.org/TR/WCAG21/) (WCAG),\n  the global accessibility standard.\n\n## Approach\n\nAccessibility is a multifaceted challenge that requires a variety of methods to ensure that all users can access content in a way that works for them.\n\nAs part of our process, Workday fosters understanding of the different experiences that users face. To do this, we:\n\n- Promote human-centered design\n- Design products with POUR (perceivable, operable, understandable, and robust) principles in mind\n- Work closely with all stakeholders, including our customer partners and end users\n- Solicit feedback on features and functionality by people with disabilities\n- Host workshops facilitated by accessibility experts\n- Encourage use of our empathy lab\n","parent":{"__typename":"File","relativeDirectory":"guidelines","name":"accessibility"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/guidelines/index.md","frontmatter":{"title":"Guidelines"},"rawBody":"---\ntitle: Guidelines\n---\n\n**TODO** General description of guidelines\n","parent":{"__typename":"File","relativeDirectory":"guidelines","name":"index"}},{"fileAbsolutePath":"/home/runner/work/tool-starter/tool-starter/content/guidelines/typography.md","frontmatter":{"title":"Typography"},"rawBody":"---\ntitle: Typography\n---\n\nWell-defined typography styles in combination with a design system layout grid will create structured content.\n\n## Base\n\n```html live\n<p>The base type is 1.6rem (16px) over 1.6 line height (24px)</p>\n```\n\n## Headings\n\nHeadings are made with styles for `<h1>` through `<h6>` tags.\n\n```html live\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n```\n\n## Text elements\n\n```html live\n<a>Anchor</a><br />\n<em>Emphasis</em><br />\n<small>Small</small><br />\n<strong>Strong</strong><br />\n<u>Underline</u>\n```\n\n## How this page is built\n\nTo make the typography examples working, we had to provide global styles for all the exmaples. It can be done\nin `src/@bridgetool/gatsby-theme-dev/components/live-preview-wrapper.js` file.\n\n```js\nimport React from \"react\"\nimport milligramStyles from \"!!raw-loader!milligram/dist/milligram.css\"\nimport { Frame } from \"@bridgetool/gatsby-theme-dev\"\n\nfunction LivePreviewWrapper({ children }) {\n  return (\n    <Frame>\n      <style>{milligramStyles}</style>\n      <div>{children}</div>\n    </Frame>\n  )\n}\n\nexport default LivePreviewWrapper\n```\n\nUse `raw-loader` to get the content of your CSS file and output it in `<style>` tag\ninside `<Frame>`. This way, you can provide any global CSS, and it will only\napply to the examples not to the documentation pages.\n","parent":{"__typename":"File","relativeDirectory":"guidelines","name":"typography"}}]}}}