{"version":3,"sources":["webpack:///./content/guidelines/typography.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kzBAQO,IAAMA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,OACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,uIACA,8BACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBACb,WAAc,OACd,MAAQ,GAHP,wEAML,kCACA,0DAAyC,0BAAYA,WAAW,KAAvB,QAAzC,YAAsG,0BAAYA,WAAW,KAAvB,QAAtG,UACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBACb,WAAc,OACd,MAAQ,GAHP,6HAWL,uCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBACb,WAAc,OACd,MAAQ,GAHP,gIAUL,gDACA,0IACC,0BAAYA,WAAW,KAAvB,uEADD,UAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eADZ,uWAiBL,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,yDAA2H,0BAAYA,WAAW,KAAvB,WAA3H,gBACK,0BAAYA,WAAW,KAAvB,WADL,wHAOJJ,EAAWK,gBAAiB","file":"component---content-guidelines-typography-md-867b8d7a4f821bc454b9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/tool-starter/tool-starter/node_modules/@bridgetool/gatsby-theme-dev/src/components/ThemeComponents/layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Well-defined typography styles in combination with a design system layout grid will create structured content.`}</p>\n    <h2>{`Base`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<p>The base type is 1.6rem (16px) over 1.6 line height (24px)</p>\n`}</code></pre>\n    <h2>{`Headings`}</h2>\n    <p>{`Headings are made with styles for `}<inlineCode parentName=\"p\">{`<h1>`}</inlineCode>{` through `}<inlineCode parentName=\"p\">{`<h6>`}</inlineCode>{` tags.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n`}</code></pre>\n    <h2>{`Text elements`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<a>Anchor</a><br />\n<em>Emphasis</em><br />\n<small>Small</small><br />\n<strong>Strong</strong><br />\n<u>Underline</u>\n`}</code></pre>\n    <h2>{`How this page is built`}</h2>\n    <p>{`To make the typography examples working, we had to provide global styles for all the exmaples. It can be done\nin `}<inlineCode parentName=\"p\">{`src/@bridgetool/gatsby-theme-dev/components/live-preview-wrapper.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\"\nimport milligramStyles from \"!!raw-loader!milligram/dist/milligram.css\"\nimport { Frame } from \"@bridgetool/gatsby-theme-dev\"\n\nfunction LivePreviewWrapper({ children }) {\n  return (\n    <Frame>\n      <style>{milligramStyles}</style>\n      <div>{children}</div>\n    </Frame>\n  )\n}\n\nexport default LivePreviewWrapper\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`raw-loader`}</inlineCode>{` to get the content of your CSS file and output it in `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` tag\ninside `}<inlineCode parentName=\"p\">{`<Frame>`}</inlineCode>{`. This way, you can provide any global CSS, and it will only\napply to the examples not to the documentation pages.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}